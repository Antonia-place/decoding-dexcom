
## crc calculation

```csharp

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DexWatchPi
{

using System;

    public class Crc
    {

        // Fields
        private static ushort[] m_crc16Table = new ushort[] { 
        0, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 
        0x1231, 0x210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 
        0x2462, 0x3443, 0x420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 
        0x3653, 0x2672, 0x1611, 0x630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 
        0x48c4, 0x58e5, 0x6886, 0x78a7, 0x840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 
        0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0xa50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 
        0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0xc60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 
        0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0xe70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 
        0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0xa1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067, 
        0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x2b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 
        0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x481, 0x7466, 0x6447, 0x5424, 0x4405, 
        0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 
        0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x8e1, 0x3882, 0x28a3, 
        0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0xaf1, 0x1ad0, 0x2ab3, 0x3a92, 
        0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0xcc1, 
        0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0xed1, 0x1ef0
     };
        private static uint[] m_crc32Table = new uint[0x100];
        private static byte[] m_crc8Table = new byte[] { 
        0, 7, 14, 9, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d, 
        0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 70, 0x41, 0x54, 0x53, 90, 0x5d, 
        0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd, 
        0x90, 0x97, 0x9e, 0x99, 140, 0x8b, 130, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 180, 0xb3, 0xba, 0xbd, 
        0xc7, 0xc0, 0xc9, 0xce, 0xdb, 220, 0xd5, 210, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea, 
        0xb7, 0xb0, 0xb9, 190, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a, 
        0x27, 0x20, 0x29, 0x2e, 0x3b, 60, 0x35, 50, 0x1f, 0x18, 0x11, 0x16, 3, 4, 13, 10, 
        0x57, 80, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a, 
        0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 170, 0xa3, 0xa4, 
        0xf9, 0xfe, 0xf7, 240, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 200, 0xdd, 0xda, 0xd3, 0xd4, 
        0x69, 110, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44, 
        0x19, 30, 0x17, 0x10, 5, 2, 11, 12, 0x21, 0x26, 0x2f, 40, 0x3d, 0x3a, 0x33, 0x34, 
        0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 120, 0x7f, 0x6a, 0x6d, 100, 0x63, 
        0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 6, 1, 8, 15, 0x1a, 0x1d, 20, 0x13, 
        0xae, 0xa9, 160, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 150, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83, 
        0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 230, 0xe1, 0xe8, 0xef, 250, 0xfd, 0xf4, 0xf3
     };

        // Methods
        static Crc()
        {
            DoGenerateCrc32Table();
        }

        public static ushort CalculateCrc16(byte[] buf, int start, int end)
        {
            ushort num = 0;
            for (int i = start; i < end; i++)
            {
                num = (ushort)((num << 8) ^ m_crc16Table[((num >> 8) ^ buf[i]) & 0xff]);
            }
            return num;
        }

        public static uint CalculateCrc32(byte[] buf, int start, int end)
        {
            uint maxValue = uint.MaxValue;
            for (int i = start; i < end; i++)
            {
                maxValue = (maxValue >> 8) ^ m_crc32Table[(int)((IntPtr)((maxValue & 0xff) ^ buf[i]))];
            }
            return (maxValue ^ uint.MaxValue);
        }

        public static byte CalculateCrc8(uint data)
        {
            byte num = 0;
            byte num2 = (byte)(data >> 0x18);
            num = m_crc8Table[num ^ num2];
            num2 = (byte)(data >> 0x10);
            num = m_crc8Table[num ^ num2];
            num2 = (byte)(data >> 8);
            num = m_crc8Table[num ^ num2];
            num2 = (byte)data;
            return m_crc8Table[num ^ num2];
        }

        private static void DoGenerateCrc32Table()
        {
            uint num = 0x4c11db7;
            for (uint i = 0; i <= 0xff; i++)
            {
                m_crc32Table[i] = Reflect(i, '\b') << 0x18;
                for (uint j = 0; j < 8; j++)
                {
                    if ((m_crc32Table[i] & 0x80000000) > 0)
                    {
                        m_crc32Table[i] = (m_crc32Table[i] << 1) ^ num;
                    }
                    else
                    {
                        m_crc32Table[i] = m_crc32Table[i] << 1;
                    }
                }
                m_crc32Table[i] = Reflect(m_crc32Table[i], ' ');
            }
        }

        private static uint Reflect(uint reference, char ch)
        {
            uint num = 0;
            for (int i = 1; i < (ch + '\x0001'); i++)
            {
                if ((reference & 1) > 0)
                {
                    num |= ((uint)1) << ((ushort)(ch - i));
                }
                reference = reference >> 1;
            }
            return num;
        }
    }

}
```

